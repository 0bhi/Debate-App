// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  debates       DebateSession[]
  createdAt     DateTime        @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DebateSession {
  id        String        @id @default(cuid())
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  topic     String
  personaA  Json          // { name, bio, style, voice }
  personaB  Json
  rounds    Int
  status    DebateStatus  @default(CREATED)
  winner    DebateWinner?
  judgeJSON Json?
  autoJudge Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  turns     DebateTurn[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum DebateStatus {
  CREATED
  RUNNING
  JUDGING
  FINISHED
  FAILED
}

enum DebateWinner {
  A
  B
  TIE
}

model DebateTurn {
  id          String      @id @default(cuid())
  session     DebateSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String
  orderIndex  Int
  speaker     TurnSpeaker
  prompt      String      @db.Text
  response    String      @db.Text
  audioUrl    String?
  tokensIn    Int?
  tokensOut   Int?
  durationMs  Int?
  createdAt   DateTime    @default(now())

  @@index([sessionId])
  @@index([sessionId, orderIndex])
}

enum TurnSpeaker {
  A
  B
  JUDGE
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([resetTime])
} 